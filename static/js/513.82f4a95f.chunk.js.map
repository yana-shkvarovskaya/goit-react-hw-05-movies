{"version":3,"file":"static/js/513.82f4a95f.chunk.js","mappings":"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","sources":["components/PageHeading/PageHeading.js","services/movies-api.js","views/OneMovieView.js"],"sourcesContent":["import './PageHeading.css';\n\nexport default function PageHeading({ text }) {\n  return <h1 className=\"title\">{text}</h1>;\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '8f2143e87d675d4e916d007dbc4e3721';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nasync function fetchApiMovieTrending() {\n  try {\n    const config = {\n      url: `trending/movie/week`,\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error('No response from server');\n  }\n}\n\nasync function fetchApiMoviesByQuery(query) {\n  try {\n    const config = {\n      url: `search/movie`,\n      params: {\n        query,\n      },\n    };\n\n    const { data } = await axios(config);\n    return data.results;\n  } catch (error) {\n    new Error('No response from server');\n  }\n}\n\nasync function fetchApiMovieDetails(movieId) {\n  try {\n    const config = {\n      url: `movie/${movieId}`,\n    };\n\n    const { data } = await axios(config, movieId);\n    return data;\n  } catch (error) {\n    new Error('No response from server');\n  }\n}\n\nasync function fetchApiMovieCast(movieId) {\n  try {\n    const config = {\n      url: `movie/${movieId}/credits`,\n    };\n\n    const { data } = await axios(config, movieId);\n    return data.cast;\n  } catch (error) {\n    new Error('No response from server');\n  }\n}\n\nasync function fetchApiMovieReviews(movieId) {\n  try {\n    const config = {\n      url: `movie/${movieId}/reviews`,\n    };\n\n    const { data } = await axios(config, movieId);\n    return data.results;\n  } catch (error) {\n    new Error('No response from server');\n  }\n}\n\nconst moviesApi = {\n  fetchApiMovieTrending,\n  fetchApiMoviesByQuery,\n  fetchApiMovieDetails,\n  fetchApiMovieCast,\n  fetchApiMovieReviews,\n};\n\nexport default moviesApi;\n","import {\n  useParams,\n  NavLink,\n  Route,\n  Routes,\n  useNavigate,\n} from 'react-router-dom';\nimport { useState, useEffect, lazy, Suspense } from 'react';\nimport { animateScroll as scroll } from 'react-scroll';\nimport PageHeading from 'components/PageHeading/PageHeading';\nimport moviesApi from 'services/movies-api';\n\nconst Cast = lazy(() => import('components/Cast/Cast'));\nconst Reviews = lazy(() => import('components/Reviews/Reviews'));\n\nexport default function OneMovieView() {\n  const { movieId } = useParams();\n\n  const [movie, setMovie] = useState(null);\n  const [visibleCast, setVisibleCast] = useState(false);\n  const [visibleReviews, setVisibleReviews] = useState(false);\n\n  const navigate = useNavigate();\n  const srcBaseUrl = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    moviesApi.fetchApiMovieDetails(movieId).then(setMovie);\n    scroll.scrollMore(100);\n  }, [movieId]);\n\n  const onBackClick = e => {\n    e.preventDefault();\n    navigate(-1);\n  };\n\n  const onVisibleCast = () => {\n    if (visibleReviews) {\n      setVisibleReviews(false);\n    }\n    setVisibleCast(true);\n  };\n\n  const onVisibleReviews = () => {\n    if (visibleCast) {\n      setVisibleCast(false);\n    }\n    setVisibleReviews(true);\n  };\n\n  return (\n    <>\n      <PageHeading text=\"Movie Details\" />\n\n      {movie && (\n        <>\n          <div className=\"wrapper\">\n            <div>\n              <img\n                className=\"wrapperImg\"\n                src={`${srcBaseUrl}${movie.poster_path}`}\n                alt={movie.title}\n              />\n            </div>\n            <div className=\"wrapperText\">\n              <h3>\n                {movie.title}({movie.release_date.split('-')[0]})\n              </h3>\n              <p>User Score: {movie.vote_average * 10}%</p>\n\n              <h3>Overview</h3>\n              <p>{movie.overview}</p>\n\n              {<h3>Genres</h3>}\n              {<p>{movie.genres.map(genre => genre.name).join(' , ')}</p>}\n\n              <button className=\"wrapperButton\" onClick={onBackClick}>\n                Go Back\n              </button>\n            </div>\n          </div>\n\n          <hr />\n          <p>Additional information</p>\n\n          <ul className=\"additionalInformation\">\n            <li className=\"nav\">\n              <NavLink\n                to={{\n                  pathname: `/movies/${movieId}/cast`,\n                }}\n                onClick={onVisibleCast}\n                className={({ isActive }) => (isActive ? 'active' : 'inactive')}\n              >\n                Cast\n              </NavLink>\n            </li>\n\n            <li>\n              <NavLink\n                to={{\n                  pathname: `/movies/${movieId}/reviews`,\n                }}\n                onClick={onVisibleReviews}\n                className={({ isActive }) => (isActive ? 'active' : 'inactive')}\n              >\n                Reviews\n              </NavLink>\n            </li>\n          </ul>\n          <hr />\n          <Suspense fallback={<h2>Loading...</h2>}>\n            <Routes>\n              <Route path=\"/cast\" element={<Cast id={movieId} />}></Route>\n              <Route path=\"/reviews\" element={<Reviews id={movieId} />}></Route>\n            </Routes>\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["PageHeading","text","className","fetchApiMovieTrending","config","url","axios","data","results","Error","fetchApiMoviesByQuery","query","params","fetchApiMovieDetails","movieId","fetchApiMovieCast","cast","fetchApiMovieReviews","api_key","language","moviesApi","Cast","lazy","Reviews","OneMovieView","useParams","useState","movie","setMovie","visibleCast","setVisibleCast","visibleReviews","setVisibleReviews","navigate","useNavigate","useEffect","then","scroll","src","poster_path","alt","title","release_date","split","vote_average","overview","genres","map","genre","name","join","onClick","e","preventDefault","to","pathname","isActive","Suspense","fallback","path","element","id"],"sourceRoot":""}